// attributes
varying vec3 v_viewPosition;
varying vec3 v_viewNormal;
varying vec2 v_uv0;
varying vec2 v_uv1; // if there is no uv1 on the geometry, this will be a copy of uv0
varying vec2 v_uv2; // if there is no uv2 on the geometry, this will be a copy of uv0

// camera
uniform mat4 u_localToView;  // geometry
uniform mat4 u_viewToScreen; // camera

// material
#pragma include <materials/material_input>
uniform MaterialInputV3 u_normal;
uniform MaterialInputV3 u_ambientOcclusion;
uniform MaterialInputV3 u_albedo;
uniform MaterialInputV3 u_metalness;
uniform MaterialInputV3 u_roughness;
uniform MaterialInputV3 u_roughnessAnisotropy;
uniform MaterialInputV3 u_clearcoat;
uniform MaterialInputV3 u_clearcoatRoughness;
uniform MaterialInputV3 u_clearcoatNormal;
uniform MaterialInputV3 u_sheen; // color + intensity
uniform MaterialInputV3 u_subsurface;
uniform MaterialInputV3 u_subsurfaceThickness;

// punctual lights
#pragma include <lighting/punctual>
uniform PunctualLight u_PunctualLights[LIGHT_COUNT];

// image-based lights
uniform int u_numMips;
uniform samplerCube u_lambertianIBL;
uniform samplerCube u_specularIBL;
uniform sampler2D u_specularLUT;
uniform samplerCube u_charlieIBL;
uniform sampler2D u_charlieLUT;

// output
uniform int umaterialOutputs;  // MaterialOutputs

#pragma include <materials/material_outputs>
#pragma include <brdfs/old/brdf_specular_ggx>

void main() {

  vec3 normal = getMaterialInputV3( u_normal, v_uv0, v_uv1, v_uv2 );
  vec3 ambientOcclusion = getMaterialInputV3( u_ambientOcclusion, v_uv0, v_uv1, v_uv2 );
  vec3 albedo = getMaterialInputV3( u_albedo, v_uv0, v_uv1, v_uv2 );
  vec3 metalness = getMaterialInputV3( u_metalness, v_uv0, v_uv1, v_uv2 );
  vec3 roughness = getMaterialInputV3( u_roughness, v_uv0, v_uv1, v_uv2 );
  vec3 roughnessAnisotropy = getMaterialInputV3( u_roughnessAnisotropy, v_uv0, v_uv1, v_uv2 );
  vec3 clearcoat = getMaterialInputV3( u_clearcoat, v_uv0, v_uv1, v_uv2 );
  vec3 clearcoatRoughness = getMaterialInputV3( u_clearcoatRoughness, v_uv0, v_uv1, v_uv2 );
  vec3 clearcoatNormal = getMaterialInputV3( u_clearcoatNormal, v_uv0, v_uv1, v_uv2 );
  vec3 sheen = getMaterialInputV3( u_sheen, v_uv0, v_uv1, v_uv2 );
  vec3 subsurface = getMaterialInputV3( u_subsurface, v_uv0, v_uv1, v_uv2 );
  vec3 subsurfaceThickness = getMaterialInputV3( u_subsurfaceThickness, v_uv0, v_uv1, v_uv2 );

  vec4 beauty = brdf_ggx_specular( v_viewPosition, v_viewNormal, albedo, roughness, metalness );

  gl_FragColor = getMaterialOutput(
    materialOutput,
    v_viewPosition, v_viewNormal, albedo, metalness, roughness, beauty );

}
